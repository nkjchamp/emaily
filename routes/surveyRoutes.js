const mongoose = require("mongoose");
const _ = require("lodash");
const Path = require("path-parser").default;
const { URL } = require("url");

const requireLogin = require("../middlewares/requireLogin");
const requireCredits = require("../middlewares/requireCredits");
const Mailer = require("../services/Mailer");
const surveyTemplate = require("../services/emailTemplates/surveyTemplate");

const Survey = mongoose.model("surveys"); // some testing frameworks will complain if your require in a file multiple times so this is a workaround

module.exports = app => {
	app.get("/api/surveys/:surveyId/yes", (req, res) => {
		res.send(
			"Thanks for voting 'Yes'! I hope you vote 'Yes' to hiring Neil too :)"
		);
	});

	app.get("/api/surveys/:surveyId/no", (req, res) => {
		res.send(
			"Thanks for voting! Even though you voted 'No' to this question, I hope you vote 'Yes' to hiring Neil :)"
		);
	});

	app.post("/api/surveys/webhooks", (req, res) => {
		// console.log(req.body);
		const p = new Path("/api/surveys/:surveyId/:choice");
		const events = _.chain(req.body)
			.map(({ email, url }) => {
				const match = p.test(new URL(url).pathname); //cannot destructure this because will return null if url doesn't match
				if (match) {
					return {
						email: email,
						surveyId: match.surveyId,
						choice: match.choice
					};
				}
			})
			.compact() // removes undefined and returns only objects
			.uniqBy("email", "surveyId") // returns only unique objects based on email + surveyId properties
			.each(({ surveyId, email, choice }) => {
				Survey.updateOne(
					{
						// asynchronous piece of code but don't need async because nothing to respond back to webhook with
						_id: surveyId, // in mongo _id is how the id is stored
						recipients: {
							$elemMatch: { email: email, responded: false }
						}
					},
					{
						$inc: { [choice]: 1 }, // $inc is increment [choice] by x
						$set: { "recipients.$.responded": true }, // $ replaced with the $elemMatch object
						lastResponded: new Date()
					}
				).exec(); // execute query to database
			})
			.value();
		// console.log("events: ", events);

		res.send({});
	});

	app.get("/api/surveys", requireLogin, async (req, res) => {
		const surveys = await Survey.find({ _user: req.user.id }).select({
			recipients: false // specify we don't want the results set to include the recipients field
		});

		res.send(surveys);
	});

	app.post("/api/surveys", requireLogin, requireCredits, async (req, res) => {
		const { title, subject, body, recipients } = req.body;

		let recipientsList = recipients
			.split(",")
			.map(email => ({ email: email.trim() })) // identify returning an object with ({})
			.filter(email => ({ email: email.length > 0 }));
		// recipientsList = _.compact(recipientsList);
		// console.log("emails: ", recipientsList);

		const survey = new Survey({
			title,
			body,
			subject,
			recipients: recipientsList,
			_user: req.user.id, // user id that is automatically generated by mongo/mongoose
			dateSent: Date.now()
		});

		// send email
		const mailer = new Mailer(survey, surveyTemplate(survey));

		try {
			await mailer.send();
			await survey.save();
			req.user.credits -= 1;
			const user = await req.user.save();

			res.send(user);
		} catch (err) {
			res.status(422).send(err);
		}
	});
};
